'''Utility functions to call MCFOST in vac2fost.main() to define the final grid.'''

import subprocess
import pathlib
import shutil
import astropy.io.fits as pyfits
from warnings import warn

mcfost_args_locations = {
    # locate mcfost arguments in default.para by (line,column)
    # grid
    'nr'   : (15,0),
    'nz'   : (15,1),
    'nphi' : (15,2),
    'nr_in': (15,3),
    'rmin' : (47,0),
    'rmax' : (47,2),
    'maps_size': (18,2),
    # dust
    'total_dust_mass': (45,0), #in solar masses
    'gas2dust_ratio' : (45,1),
    # star
    'distance': (21,0),
    'star_temp': (70,0),
    'star_mass': (70,2),
    # density
    'scale_height': (46,0),
    'ref_rad': (46,1), # where 'scale_height' is defined
    'flaring': (48,0),
}

def update_lines(lines, params:dict):
    for key,val in params.items():
        try:
            pos = mcfost_args_locations[key]
            mline = lines[pos[0]].split()
            mline[pos[1]] = str(val)
            lines[pos[0]] = '  ' + ' '.join(mline) + '\n'
        except KeyError:
            warn(f'unable to locate {key}')

def write_mcfost_conf(mcfost_list, mesh_list):
    with open(pathlib.Path(__file__).parent.parent/'data/default_mcfost_conf.para', 'r') as fi:
        lines = fi.readlines()

    clines = lines[:] #copy
    update_lines(clines, mcfost_list)

    auto_fills = {
        'rmin': mesh_list['xprobmin1'],
        'rmax': mesh_list['xprobmax1'],
        'maps_size': 2*mesh_list['xprobmax1']
    }
    update_lines(clines, auto_fills)

    mcfost_conf_file = pathlib.Path('mcfost_conf.para')
    if mcfost_conf_file.exists():
        warn(f'{mcfost_conf_file} already exists, and will be overwritten.')
    with open(mcfost_conf_file, 'w') as fo:
        fo.write(''.join(clines))
        fo.write(f'\n\n\n%% GENERATED BY {__file__} %%\n')

def get_mcfost_grid(mcfost_list, mesh_list, silent=True):
    '''pre-run MCFOST in -disk_struct mode to extract the exact grid used.'''
    if silent:
        stdout = subprocess.PIPE
    else:
        stdout = None
    write_mcfost_conf(mcfost_list, mesh_list)
    # generate a grid data file with mcfost itself and extract it
    tmp_fost_dir = pathlib.Path('tmp_mcfost')
    if tmp_fost_dir.exists():
        shutil.rmtree(tmp_fost_dir)
    try:
        subprocess.call(
            f'mcfost mcfost_conf.para -disk_struct -root_dir {tmp_fost_dir}',
            shell=True,
            stdout=stdout
        )
        target_grid = pyfits.open(tmp_fost_dir/'data_disk/grid.fits.gz')[0].data
    finally:
        shutil.rmtree(tmp_fost_dir)
    return target_grid
